---
import { format } from "date-fns"; 
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";

const { posts, images } = Astro.props; 
type Post = CollectionEntry<"posts">;

const slugify = (album: string) => album.replace(/\s+/g, "-").toLowerCase();

// Preload all images asynchronously
const loadedImages = await Promise.all(
  posts.map(async (post: Post) => {
    const imagePath = post.data.image;
    if (imagePath && images[imagePath]) {
      try {
        const importedImage = await images[imagePath]();
        return { ...post, importedImage };
      } catch (error) {
        console.error(`Error importing image at ${imagePath}`, error);
      }
    }
    return { ...post, importedImage: null };
  })
);

const dates = posts.map((post: Post) => new Date(post.data.date));
const years = [...new Set(dates.map((date: Date) => date.getFullYear()))];
const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];
---

<div class="w-full flex flex-col md:flex-row">
  <div class="flex flex-col w-full md:w-3/4 max-w-[900px] mx-auto sm:w-11/12">
    <input
      id="search-input"
      type="text"
      placeholder="Search albums, artists, performers or genres"
      class="w-full p-2 mb-6 mt-4 bg-gray-200 dark:bg-[#18181b] text-black dark:text-white rounded-lg shadow-sm border border-gray-300 dark:border-transparent"
    />

    <div id="posts-list" class="flex flex-col gap-6">
      {loadedImages.map((post, index) => {
        const postWithImage = post as Post & { importedImage: { default: string } | null };

        return (
          <div
            class="post bg-[#f8f8f8] dark:bg-[#18181b] rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row gap-4"
            data-album={postWithImage.data.album?.toLowerCase() ?? ""}
            data-artist={postWithImage.data.artist?.toLowerCase() ?? ""}
            data-genres={postWithImage.data.genres?.map((genre: string) => genre.toLowerCase()).join(",") ?? ""}
            data-performers={postWithImage.data.performers?.map((performer: string) => performer.toLowerCase()).join(",") ?? ""}
            data-date={new Date(postWithImage.data.date ?? new Date()).toISOString()}
          >
            {postWithImage.importedImage ? (
              <Image
                src={postWithImage.importedImage.default}
                alt={`Album cover for ${postWithImage.data.album}`}
                width={250}
                height={250}
                loading={index < 4 ? "eager" : "lazy"}
                class="object-cover w-full sm:w-[250px] h-auto sm:h-[250px] flex-shrink-0"
              />
            ) : (
              <div class="w-full sm:w-[250px] h-[250px] bg-gray-700"></div>
            )}
            <div class="flex flex-col justify-start p-4">
              <h2 class="album-title text-2xl font-semibold text-black dark:text-white mb-2 hover:underline hover:decoration-red-500 dark:hover:decoration-red-400 hover:text-red-500 dark:hover:text-red-400 transition duration-100">
                <a href={`/blog/${slugify(postWithImage.data.album ?? "")}`}>
                  {postWithImage.data.album} - {postWithImage.data.artist}
                </a>
              </h2>
              <p class="text-md text-black dark:text-white mb-3 leading-relaxed">
                {postWithImage.data.description}
              </p>
              <p class="text-gray-600 dark:text-gray-400 text-sm mt-1">
                {format(new Date(postWithImage.data.date), "MMMM do, yyyy")}
              </p>
            </div>
          </div>
        );
      })}
    </div>
  </div>

  <div class="w-full md:w-1/4 md:pl-6 mt-4 md:mt-0">
    <h3 class="text-xl font-semibold mb-4">Filter by Date</h3>
    <select id="year-select" class="w-full p-2 mb-4 bg-gray-100 dark:bg-[#18181b] text-black dark:text-white rounded-lg">
      <option value="">Select Year</option>
      {years.map((year) => (
        <option value={String(year)} >
          {year}
        </option>
      ))}
    </select>

    <select id="month-select" class="w-full p-2 mb-4 bg-gray-100 dark:bg-[#18181b] text-black dark:text-white rounded-lg">
      <option value="">Select Month</option>
      {months.map((month, index) => (
        <option value={index} >
          {month}
        </option>
      ))}
    </select>

    <button id="clear-filters" class="w-full p-2 bg-red-500 text-white rounded-lg">Clear Filters</button>
  </div>
</div>
